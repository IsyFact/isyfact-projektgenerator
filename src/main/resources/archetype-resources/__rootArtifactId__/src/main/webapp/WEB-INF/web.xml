#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
    Die Web.xml fuer das ${artifactId}
    
    In dieser Datei wird der ApplicationContext von Spring, log4j, das Axis-Servlet 
    und das HttpInvoker-Servlet konfiguriert.
    
    Author: Christian Hinken
    Revision: ${symbol_dollar}Id: web.xml 98457 2011-02-18 11:14:46Z sdm_sspielmann ${symbol_dollar}
    ====================================================================== -->


<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
    <display-name>${artifactId}</display-name>

    <!-- Spring: Registration of ApplicationContext -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:resources/spring/application.xml,
            classpath:resources/spring/timertasks.xml,
            classpath:resources/spring/ueberwachung.xml,
            classpath:resources/spring/service/service.xml
        </param-value>
    </context-param>
    <!-- 
        Angabe des WebAppRooKeys. Dies ist notwendig sofern mehrere 
        Anwendungen in einem Tomcat betrieben werden, da der Tomcat 
        den WebAppRoot nicht fuer jede Anwendung separat verwaltet.
        Details siehe 
        http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/util/Log4jWebConfigurer.html
    -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>${artifactId}</param-value>
    </context-param>
    <!-- LOG4J Konfiguration
        Angabe des Speicherorts der log4j Konfiguration
        Wenn nicht angegeben, greift die Standardinitialisierung:
        Konfiguration im Classpath. 
        Aufgrund des Deplyoments liegt die Konfiguration aber unter
        /classes/config/log4j.properties
        Details siehe 
        http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/web/util/Log4jWebConfigurer.html
    -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:/config/log4j.properties</param-value>
    </context-param>
    <!-- 
        Angabe des Pruefungsintervalls fuer Aenderungen an der Konfiguration
        Hier: jede Minute (60*100)
    -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>

    <!-- 
        Angabe des zu verwendenden Listeners fuer log4j
        
        Dies ist noetig, da Container, die die Servlet 2.4 API implementieren 
        verlangen, dass Listener vor load-on-startup Servlets geladen werden.
        Servlet 2.3 Container erzwingen dieses Vorgehen.
        Ausserdem ist der Log4jConfigListener vor dem ContextLoaderListener zu
        registrieren, siehe 
        http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/web/util/Log4jConfigListener.html
        
        Anmerkung: Sollte ein aelterer Servlet-Container (2.2) verwendet werden ist
        Log4jConfigServlet anstelle von Log4jConfigListener zu verwenden.
    -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!-- 
        Bootstrap Listener zum Starten des Springs Haupt-WebApplicationContexts 
        von Spring. Delegiert an ContextLoader.
        Sofern der Log4jConfigListener verwendet wird ist dieser vor dem 
        ContextLoaderListener in der web.xml zu registrieren.
        
        Anmerkung: Sollte ein aelterer Servlet-Container (2.2) verwendet werden 
        ist ContextLoaderServlet anstelle von ContextLoaderListener zu verwenden
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Servlet fuer HTTPInvoker-Aufrufe. 
        Das Servlet nimmt die Aufrufe entgegen und verteilt sie auf die RemoteBeans. 
        Die entsprechene Konfiguration befindet sich in remoting-servlet.xml -->
    <servlet>
        <servlet-name>remoting</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/classes/resources/spring/service/remoting-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- Servlet zur Kommunikation mit dem Loadbalancer. Das Servlet prueft fuer jeden HTTP-GET-Aufruf,
        ob eine isAlive-Datei vorhanden ist. Falls ja, wird HTTP-OK zurueckgeliefert. Falls nein HTTP-FORBIDDEN.
    -->
    <servlet>
        <servlet-name>loadbalancer</servlet-name>
        <servlet-class>
            de.bund.bva.pliscommon.ueberwachung.service.loadbalancer.LoadbalancerServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>remoting</servlet-name>
        <url-pattern>/AuskunftBean_v1_0</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>remoting</servlet-name>
        <url-pattern>/AdminBean_v1_0</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>loadbalancer</servlet-name>
        <url-pattern>/Loadbalancer</url-pattern>
    </servlet-mapping>

</web-app>
